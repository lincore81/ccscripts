--build
CTRL_PREFIX = "--#"
COMMENT = "//"
NEWLINE = "\n"
FILE_HEADER = CTRL_PREFIX .. "@build"
STATE_FILE = "build-state"

state = {schematic = {}}


StringBuffer = {}
	function StringBuffer:new(initialValue)
		instance = {}
		instance.buffer = {}
		setmetatable(instance, self)
		self.__index = self

		if initialValue then
			instance:add(initialValue)
		end
		return instance
	end

	function StringBuffer:toString(delimiter)
		return table.concat(self.buffer, delimiter)
	end

	function StringBuffer:dump()
		for k, v in ipairs(self.buffer) do
			print(k .. ": " .. v)
		end
	end

	function StringBuffer:add(...)
		for _, v in ipairs(arg) do
			table.insert(self.buffer, tostring(v))
		end
	end

	function StringBuffer:clear()
		self.buffer = {}
	end

	function StringBuffer:isEmpty()
		return #self.buffer == 0
	end

	function StringBuffer:contains(str)
		for _, v in ipairs(self.buffer) do
			if v == str then return true end
		end
	end



function isAbsolutePath(path)
	return string.sub(path, 1, 1) == "/"
end

function getAbsolutePath(path)
	if isAbsolutePath(path) then
		return path
	else
		return "/" .. fs.combine(shell.dir(), path)
	end
end

function string.trim(str)
	return string.gsub(str, "%s+", "")
end

function string.beginsWith(str, substr)
	if not str or not substr then return false end
	if string.len(substr) > string.len(str) then return false end
	if str == substr then return str, "" end
	return string.sub(str, 1, string.len(substr)) == substr, string.sub(str, string.len(substr) + 1)
end

function string.explode(str)
	local chars = {}
	for i = 1, string.len(str) do
		table.insert(chars, string.sub(str, i, i))
	end
	return chars
end

function table.dump(tabl, recursive, depth)
	local dumpedTables = {} -- to avoid circular references
	local _dump
	_dump = function(tabl, indent, depth)
		dumpedTables[tabl] = true
		for k, v in pairs(tabl) do
			local d = (depth and depth > 0) or not depth
			if type(v) == "table" and recursive and d and not dumpedTables[v] then
				print(string.rep(" ", indent) .. tostring(k) .. ":")
				if depth then
					_dump(v, indent+1, depth-1)
				else
					_dump(v, indent+1)
				end
			else
				print(string.rep(" ", indent) .. tostring(k) .. ": " .. tostring(v))
			end
		end
	end
	_dump(tabl, 0, depth)
end

function cleanLine(line)
	if not line then return line end
	local commentPosition = string.find(line, COMMENT, 1, true)
	if commentPosition then
		line = string.sub(line, 1, commentPosition - 1)
	end
	return string.trim(line)
end

function endFloorSection(floor, floorNumber, lineNumber)
	if state.schematic[floorNumber] then
		error("Error in line " .. lineNumber .. ": more than one floor with the same floor number (" ..
			floorNumber .. ").")
	end
	state.schematic[floorNumber] = floor
end


function isFloorHeader(line)
	local isCtrlSeq, remainder = string.beginsWith(line, CTRL_PREFIX)
	if isCtrlSeq then
		return tonumber(remainder) or false
	else
		return false
	end
end

function parseFloorLine(floor, line)
	if line == "" then return end
	local sequence = {}
	for _, char in ipairs(string.explode(line)) do
		if char ~= ' ' or char ~= '\t' then
			local slot = tonumber(char, 16) or false
			if slot then slot = slot + 1 end
			table.insert(sequence, slot)
		end
	end
	table.insert(floor, sequence)
end


function finalizeSchematic()
	--make sure all rows have the same length:
	for k, floor in ipairs(state.schematic) do
		local maxRowLength = 0
		for l, row in ipairs(state.schematic) do
			if #row > maxRowLength then
				maxRowLength = #row
			end
		end
		for l, row in ipairs(state.schematic) do
			while #row < maxRowLength do
				table.insert(row, false)
			end
		end
	end
end




function parseSchematic(handle)
	if handle.readLine() ~= FILE_HEADER then
		error("File is not a build schematic.")
	end
	local lineNumber = 2
	local floor, floorNumber
	repeat
		local line = cleanLine(handle.readLine())
		local nextFloor = isFloorHeader(line)
		if not line or nextFloor then
			if floorNumber then
				endFloorSection(floor, floorNumber, lineNumber)
			end
		end
		if nextFloor then
				floorNumber = nextFloor
				floor = {}
		elseif line and line ~= "" then
			if not floorNumber then
				error("Error on line " .. lineNumber .. ": Missing floor header.")
			end
			parseFloorLine(floor, line)
		end
		lineNumber = lineNumber + 1
	until line == nil
end

function formatSequence(sequence)
	local buffer = StringBuffer:new()
	for k, v in ipairs(sequence) do
		buffer:add(v or " ")
	end
	return buffer:toString()
end

function build(stack)
	turtl.up()
	local height = #state.schematic
	local width  = #(state.schematic[1])
	local depth  = #(state.schematic[1][1])
	local turnRight = true
	if not stack then stack = 1 end
	for i = 1, stack do
		for k, floor in ipairs(state.schematic) do
			state.floor = k
			for l, sequence in ipairs(floor) do
				state.sequence = l
				state.block = 1
				print(tostring(k) .. "F: " .. formatSequence(sequence))
				for m, block in ipairs(sequence) do
					if block then
						if not turtl.useMaterial(block) then
							state.block = m
							turtl.saveState(state, getAbsolutePath(STATE_FILE))
							error("Out of blocks for slot " .. block .. ".")
						end
						while not turtl.placeBlock(true) do end
					else
						turtle.digDown()
					end
					if m < #sequence then
						turtl.fd(1, true)
					end
				end
				if l < #floor then
					turtl.turn(turnRight)
					turtl.fd(1, true)
					turtl.turn(turnRight)
					turnRight = not turnRight
				else
					if turnRight then
						turtl.move(-1 * (depth - 1), width - 1, 1, true)
						turtl.lt(2)
					else
						turtl.move(0, width - 1, 1, true)
						turtl.lt()
					end
				end
			end
		end
	end
end

function main(args)
	os.loadAPI("/turtle/turtl")
	local file = getAbsolutePath(args[1])
	local handle = fs.open(file, "r")
	if not handle then
		error("Could not open file '" .. file .. "' to read.")
	end
	local success, errmsg = pcall(parseSchematic, handle)
	handle.close()
	if not success then print(errmsg) end
	turtl.saveState(state, getAbsolutePath(STATE_FILE))
	print("Schematic read successfully, state saved...")
	build(args[2])
end
main({...})